# -*- coding: utf-8 -*-
"""Project1.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1O50xezoZWTkraJGAcESEVSOgsBpNvQwe

# Project 1

Jiaxin Zheng

## 1. Read and understing the data.

###About data
UCI Networking Group https://athinagroup.eng.uci.edu/projects/online-social-networks/online-social-networks-dataset/
This data set utilizes the Facebook(now Meta) social graph provided by the UCI Networking Group. This data was collected in April 2009.

###The one I choice is "Facebook Egonet Sample":
####Data Includes:
Nodes (Users): Anonymized user IDs.
Edges (Friendships): Connections between users.
"""

import pandas as pd
import networkx as nx
import matplotlib.pyplot as plt
import seaborn as sns

# Load dataset
url = "https://raw.githubusercontent.com/Jennyjjxxzz/Data-620_Project1/refs/heads/main/egonet_combined_all.csv"
df = pd.read_csv(url)

display(df.head(10))

"""Find the nuber of the nodes and number of edges."""

G = nx.from_pandas_edgelist(df, source='Egonet', target='Node')
print("Number of nodes:", G.number_of_nodes())
print("Number of edges:", G.number_of_edges())

"""## 2. Prepare the data"""

# Create graph and add nodes and edges
G = nx.Graph()
for index, row in df.iterrows():
    G.add_node(row['Node'], gender=row['Gender'])
    G.add_edge(row['Egonet'], row['Node'])

"""Compute the average of degree"""

# Compute average degree
degree_values = dict(G.degree()).values()
average_degree = sum(degree_values) / len(degree_values)
print(f"The average degree is: {average_degree}")

degree_list = list(dict(G.degree()).values())
plt.figure(figsize=(8, 6))
plt.hist(degree_list, bins=20, color='blue', alpha=0.7, label='Degree Distribution')

plt.axvline(average_degree, color='r', linestyle='dashed', label='Average Degree')
plt.xlabel('Degree')
plt.ylabel('Number of Nodes')
plt.title('Network: Node Degree Distribution')
plt.legend()
plt.show()

"""##3. Graph Creation

I create a graphic, to identify each node to its gender
"""

# Create a graphic to its gender
gender_dict = {}
for index, row in df.iterrows():
    if row['Egonet'] not in gender_dict:
        gender_dict[row['Egonet']] = row['Gender']
    if row['Node'] not in gender_dict:
        gender_dict[row['Node']] = row['Gender']

# Red for gender=1, Blue for gender=0, Gray if missing
node_colors = []
for node in G.nodes():
    g = gender_dict.get(node, None)
    if g == 1:
        node_colors.append('red')
    elif g == 0:
        node_colors.append('blue')
    else:
        node_colors.append('gray')

plt.figure(figsize=(12, 10))
nx.draw(
    G,
    node_color=node_colors,
    with_labels=True,
    node_size=300,
    font_size=8
)
plt.title("All Egonet Network Connections Colored by Gender\n(Red=1, Blue=0, Gray=Missing)")
plt.show()

"""Identify the most and least connected nodes by raw degree"""

degrees = dict(G.degree())
most_connected_node = max(degrees, key=degrees.get)
least_connected_node = min(degrees, key=degrees.get)

print(f"Most connected node (raw degree): {most_connected_node} with degree {degrees[most_connected_node]}")
print(f"Least connected node (raw degree): {least_connected_node} with degree {degrees[least_connected_node]}")

most_connected_ego = nx.ego_graph(G, most_connected_node)

fig, (ax1) = plt.subplots(figsize=(16, 8))

pos_most = nx.spring_layout(most_connected_ego)
node_colors_most = ['red' if node == most_connected_node else 'grey' for node in most_connected_ego.nodes()]
nx.draw(most_connected_ego, pos_most, ax=ax1, node_color=node_colors_most, with_labels=True, node_size=300, font_size=8)
ax1.set_title(f"Ego Network of Most Connected Node: {most_connected_node}")

"""Here is the bar chart showing the average degree centrality by gender:

Users with Gender 0 (Blue) have a higher average degree centrality than users with Gender 1 (Red).
This means that Gender 0 users tend to have more direct connections in the network compared to Gender 1.
"""

plt.figure(figsize=(6, 4))
sns.barplot(x=mean_degree_centrality.index, y=mean_degree_centrality.values, palette=['blue', 'red'])

plt.title("Average Degree Centrality by Gender")
plt.xlabel("Gender")
plt.ylabel("Mean Degree Centrality")
plt.xticks(ticks=[0, 1], labels=["0", "1"])
plt.show()

"""T- test:
Users with Gender 0 (0.0114) have a higher degree centrality on average compared to Gender 1 (0.0073).
The T-test p-value is extremely low, meaning users with Gender 0 have more direct connections (higher degree centrality) than those with Gender 1.

"""

df['Gender'] = df['Gender'].astype(str)
for index, row in df.iterrows():
    G.add_edge(row['Egonet'], row['Node'])
degree_centrality = nx.degree_centrality(G)
centrality_df = pd.DataFrame({
    'Node': list(degree_centrality.keys()),
    'DegreeCentrality': list(degree_centrality.values())
})

# Merge with Gender information
centrality_df = centrality_df.merge(df[['Node', 'Gender']].drop_duplicates(), on='Node', how='left')

# Perform T-test
group1 = centrality_df[centrality_df['Gender'] == '0']['DegreeCentrality']
group2 = centrality_df[centrality_df['Gender'] == '1']['DegreeCentrality']
t_stat, p_val = ttest_ind(group1, group2, equal_var=False)

# Compute mean degree centrality per gender
mean_degree_centrality = centrality_df.groupby('Gender')['DegreeCentrality'].mean()

# Display results
mean_degree_centrality, t_stat, p_val